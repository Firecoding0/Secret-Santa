import telebot
from telebot import types
import sqlite3
import random
from datetime import datetime
import logging

BOT_TOKEN = "bot token"
ADMIN_USER_ID = None

REGISTRATION_OPEN = False
GAME_STARTED = False
GIFT_EXCHANGE_DATE = None
END_REGISTRATION_DATE = None
GIFT_BUDGET = None

logging.basicConfig(filename='santa_bot_inline.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

DATABASE_NAME = 'santa_bot_inline.db'

def create_connection():
    conn = None
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        return conn
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def create_tables():
    conn = create_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS participants (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS wishlists (
                    user_id INTEGER PRIMARY KEY,
                    wishlist TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS game_settings (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            """)
            conn.commit()
            logging.info("–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        finally:
            conn.close()

def get_game_setting(key):
    conn = create_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT value FROM game_settings WHERE key = ?", (key,))
            result = cursor.fetchone()
            return result[0] if result else None
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
        finally:
            conn.close()
    return None

def set_game_setting(key, value):
    conn = create_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("INSERT OR REPLACE INTO game_settings (key, value) VALUES (?, ?)", (key, value))
            conn.commit()
            logging.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ {value}")
            return True
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
        finally:
            conn.close()
    return False

def is_registered(user_id):
    conn = create_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT 1 FROM participants WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            return bool(result)
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        finally:
            conn.close()
    return False

def register_participant(user_id, username):
    conn = create_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("INSERT INTO participants (user_id, username) VALUES (?, ?)", (user_id, username))
            conn.commit()
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return True
        except sqlite3.IntegrityError:
            return False
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} ({user_id}): {e}")
        finally:
            conn.close()
    return False

def remove_participant(username):
    conn = create_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("DELETE FROM participants WHERE username = ?", (username,))
            conn.commit()
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return True
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        finally:
            conn.close()
    return False

def get_wishlist(user_id):
    conn = create_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT wishlist FROM wishlists WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            return result[0] if result else None
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        finally:
            conn.close()
    return None

def set_wishlist(user_id, wishlist):
    conn = create_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("INSERT OR REPLACE INTO wishlists (user_id, wishlist) VALUES (?, ?)", (user_id, wishlist))
            conn.commit()
            logging.info(f"–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω.")
            return True
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        finally:
            conn.close()
    return False

def get_participants():
    conn = create_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT user_id, username FROM participants")
            participants = cursor.fetchall()
            return participants
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        finally:
            conn.close()
    return []

def perform_drawing():
    participants = get_participants()
    if len(participants) < 2:
        return False

    givers = list(participants)
    receivers = list(participants)
    random.shuffle(receivers)

    for i in range(len(givers)):
        while givers[i][0] == receivers[i][0]:
            random.shuffle(receivers)

    drawing_results = dict(zip([giver[0] for giver in givers], [receiver[0] for receiver in receivers]))
    logging.info("–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    return drawing_results

def send_gift_assignments(bot, drawing_results):
    for giver_id, receiver_id in drawing_results.items():
        receiver_info = bot.get_chat(receiver_id)
        receiver_username = receiver_info.username if receiver_info.username else receiver_info.first_name

        wishlist = get_wishlist(receiver_id)
        message_text = f"üéÖ –¢—ã –¥–∞—Ä–∏—à—å –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{receiver_username}."
        if wishlist:
            message_text += f"\n\nüéÅ –ï–≥–æ/–µ–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:\n{wishlist}"
        else:
            message_text += "\n\nüéÅ –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π."
        if GIFT_BUDGET:
            message_text += f"\n\nüí∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—é–¥–∂–µ—Ç –ø–æ–¥–∞—Ä–∫–∞: {GIFT_BUDGET}."
        try:
            bot.send_message(giver_id, message_text)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {giver_id} –æ –µ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–º.")
        except telebot.apihelper.ApiTelegramException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {giver_id}: {e}")

def create_main_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    item_register = types.InlineKeyboardButton("üéÅ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register')
    item_wishlist = types.InlineKeyboardButton("üìù –ú–æ–π –≤–∏—à–ª–∏—Å—Ç", callback_data='wishlist')
    item_help = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')
    markup.add(item_register, item_wishlist, item_help)
    return markup

def create_admin_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    item_start_reg = types.InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data='admin_start_registration')
    item_end_reg = types.InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data='admin_end_registration')
    item_list_part = types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data='admin_list_participants')
    item_add_part = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data='admin_add_participant')
    item_remove_part = types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data='admin_remove_participant')
    item_set_gift_date = types.InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—Ä–∫–æ–≤", callback_data='admin_set_gift_date')
    item_set_end_reg_date = types.InlineKeyboardButton("üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ–≥.", callback_data='admin_set_end_registration_date')
    item_set_budget = types.InlineKeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç", callback_data='admin_set_budget')
    item_broadcast = types.InlineKeyboardButton("üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data='admin_broadcast')
    markup.add(item_start_reg, item_end_reg, item_list_part, item_add_part, item_remove_part,
               item_set_gift_date, item_set_end_reg_date, item_set_budget, item_broadcast)
    return markup

bot = telebot.TeleBot(BOT_TOKEN)
user_wishlist_input = {}

@bot.message_handler(commands=['start'])
def start(message):
    global ADMIN_USER_ID
    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else message.from_user.first_name

    if ADMIN_USER_ID is None:
        ADMIN_USER_ID = user_id
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {username}! –¢—ã –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É —Ç—ã —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=create_admin_keyboard())
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {username} ({user_id})")
    else:
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {username}! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã.", reply_markup=create_main_keyboard())

    status_message = "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã:\n"
    if not REGISTRATION_OPEN:
        status_message += "- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.\n"
    else:
        status_message += "- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞. –£—Å–ø–µ–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n"

    if GIFT_EXCHANGE_DATE:
        status_message += f"- –î–∞—Ç–∞ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏: {GIFT_EXCHANGE_DATE.strftime('%Y-%m-%d')}\n"
    if GIFT_BUDGET:
        status_message += f"- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—é–¥–∂–µ—Ç –ø–æ–¥–∞—Ä–∫–∞: {GIFT_BUDGET}\n"

    bot.send_message(message.chat.id, status_message)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global REGISTRATION_OPEN, GAME_STARTED, GIFT_EXCHANGE_DATE, END_REGISTRATION_DATE, GIFT_BUDGET, user_wishlist_input
    user_id = call.from_user.id

    if call.data == 'register':
        if not REGISTRATION_OPEN:
            bot.answer_callback_query(call.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        elif is_registered(user_id):
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        else:
            username = call.from_user.username if call.from_user.username else call.from_user.first_name
            if register_participant(user_id, username):
                bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
                bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –¢–∞–π–Ω–æ–º –°–∞–Ω—Ç–µ!", reply_markup=create_main_keyboard())
            else:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif call.data == 'wishlist':
        if not is_registered(user_id):
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            return
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π (–∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
        user_wishlist_input[user_id] = True
        bot.register_next_step_handler(call.message, process_wishlist_input)

    elif call.data == 'help':
        help_text = """
–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∏–≥—Ä—É "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞".

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
üéÅ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:**  –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ.
üìù **–ú–æ–π –≤–∏—à–ª–∏—Å—Ç:**  –£–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤.
‚ùì **–ü–æ–º–æ—â—å:**  –í—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        if call.from_user.id == ADMIN_USER_ID:
            help_text += "\n\n**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**"
            help_text += "\n‚ñ∂Ô∏è **–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:** –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            help_text += "\n‚èπÔ∏è **–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:** –ó–∞–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫—É."
            help_text += "\nüë• **–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            help_text += "\n‚ûï **–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞:** –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            help_text += "\n‚ûñ **–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞:** –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            help_text += "\nüìÖ **–î–∞—Ç–∞ –ø–æ–¥–∞—Ä–∫–æ–≤:** –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏."
            help_text += "\nüìÖ **–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ–≥.:** –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            help_text += "\nüí∞ **–ë—é–¥–∂–µ—Ç:** –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—é–¥–∂–µ—Ç –ø–æ–¥–∞—Ä–∫–∞."
            help_text += "\nüì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ:** –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º."
        bot.send_message(user_id, help_text)

    elif call.data.startswith('admin_'):
        if call.from_user.id != ADMIN_USER_ID:
            bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
            return

        if call.data == 'admin_start_registration':
            if REGISTRATION_OPEN:
                bot.answer_callback_query(call.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.")
            else:
                REGISTRATION_OPEN = True
                bot.answer_callback_query(call.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!", show_alert=True)
                bot.send_message(call.message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –¢–∞–π–Ω–æ–º –°–∞–Ω—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∞!")
                logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫—Ä—ã–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        elif call.data == 'admin_end_registration':
            if not REGISTRATION_OPEN:
                bot.answer_callback_query(call.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞.")
            elif GAME_STARTED:
                bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.")
            else:
                REGISTRATION_OPEN = False
                GAME_STARTED = True
                drawing_results = perform_drawing()
                if drawing_results:
                    send_gift_assignments(bot, drawing_results)
                    bot.answer_callback_query(call.id, "–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!", show_alert=True)
                    bot.send_message(call.message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞, –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–æ–º—É –¥–∞—Ä—è—Ç –ø–æ–¥–∞—Ä–∫–∏!")
                    logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ–ª –∂–µ—Ä–µ–±—å–µ–≤–∫—É.")
                else:
                    GAME_STARTED = False
                    bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                    bot.send_message(call.message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏.")
                    logging.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏.")
        elif call.data == 'admin_list_participants':
            participants = get_participants()
            if participants:
                participants_list = "\n".join([f"- @{p[1]}" for p in participants])
                bot.send_message(call.message.chat.id, f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{participants_list}")
            else:
                bot.send_message(call.message.chat.id, "–ï—â–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        elif call.data == 'admin_add_participant':
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(call.message, process_add_participant)
        elif call.data == 'admin_remove_participant':
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(call.message, process_remove_participant)
        elif call.data == 'admin_set_gift_date':
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
            bot.register_next_step_handler(call.message, process_set_gift_date)
        elif call.data == 'admin_set_end_registration_date':
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
            bot.register_next_step_handler(call.message, process_set_end_registration_date)
        elif call.data == 'admin_set_budget':
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—é–¥–∂–µ—Ç –ø–æ–¥–∞—Ä–∫–∞:")
            bot.register_next_step_handler(call.message, process_set_budget)
        elif call.data == 'admin_broadcast':
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
            bot.register_next_step_handler(call.message, process_broadcast_message)

        bot.answer_callback_query(call.id)

def process_wishlist_input(message):
    user_id = message.from_user.id
    if user_id in user_wishlist_input and user_wishlist_input[user_id]:
        wishlist = message.text
        if set_wishlist(user_id, wishlist):
            bot.send_message(message.chat.id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∂–µ–ª–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=create_main_keyboard())
        else:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π.")
        del user_wishlist_input[user_id]

def process_add_participant(message):
    username_to_add = message.text
    if register_participant(None, username_to_add):
        bot.send_message(message.chat.id, f"–£—á–∞—Å—Ç–Ω–∏–∫ @{username_to_add} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=create_admin_keyboard())
    else:
        bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ @{username_to_add}.", reply_markup=create_admin_keyboard())

def process_remove_participant(message):
    username_to_remove = message.text
    if remove_participant(username_to_remove):
        bot.send_message(message.chat.id, f"–£—á–∞—Å—Ç–Ω–∏–∫ @{username_to_remove} —É–¥–∞–ª–µ–Ω.", reply_markup=create_admin_keyboard())
    else:
        bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ @{username_to_remove}.", reply_markup=create_admin_keyboard())

def process_set_gift_date(message):
    try:
        date_str = message.text
        global GIFT_EXCHANGE_DATE
        GIFT_EXCHANGE_DATE = datetime.strptime(date_str, '%Y-%m-%d').date()
        if set_game_setting('gift_exchange_date', str(GIFT_EXCHANGE_DATE)):
            bot.send_message(message.chat.id, f"–î–∞—Ç–∞ –æ–±–º–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {GIFT_EXCHANGE_DATE.strftime('%Y-%m-%d')}.", reply_markup=create_admin_keyboard())
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã.", reply_markup=create_admin_keyboard())
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.", reply_markup=create_admin_keyboard())

def process_set_end_registration_date(message):
    try:
        date_str = message.text
        global END_REGISTRATION_DATE
        END_REGISTRATION_DATE = datetime.strptime(date_str, '%Y-%m-%d').date()
        if set_game_setting('end_registration_date', str(END_REGISTRATION_DATE)):
            bot.send_message(message.chat.id, f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {END_REGISTRATION_DATE.strftime('%Y-%m-%d')}.", reply_markup=create_admin_keyboard())
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã.", reply_markup=create_admin_keyboard())
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.", reply_markup=create_admin_keyboard())

def process_set_budget(message):
    try:
        budget = int(message.text)
        global GIFT_BUDGET
        GIFT_BUDGET = budget
        if set_game_setting('gift_budget', str(GIFT_BUDGET)):
            bot.send_message(message.chat.id, f"–ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {GIFT_BUDGET}.", reply_markup=create_admin_keyboard())
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞.", reply_markup=create_admin_keyboard())
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—é–¥–∂–µ—Ç–∞.", reply_markup=create_admin_keyboard())

def process_broadcast_message(message):
    message_to_send = message.text
    participants = get_participants()
    for user_id, username in participants:
        try:
            bot.send_message(user_id, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message_to_send}")
        except telebot.apihelper.ApiTelegramException as e:
            bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} ({user_id}).", reply_markup=create_admin_keyboard())
    bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.", reply_markup=create_admin_keyboard())

if __name__ == '__main__':
    create_tables()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.polling(none_stop=True)